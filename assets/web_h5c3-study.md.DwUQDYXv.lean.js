import{_ as s,c as a,a0 as t,o as l}from"./chunks/framework.ClsDqtWH.js";const k=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"web/h5c3-study.md","filePath":"web/h5c3-study.md"}'),e={name:"web/h5c3-study.md"};function n(p,i,o,d,r,c){return l(),a("div",null,i[0]||(i[0]=[t(`<p>一、 HTML5新增语义化标签 增了那些语义化标签</p><ul><li><code>header</code> --- 头部标签</li><li><code>nav</code> --- 导航标签</li><li><code>article</code> --- 内容标签</li><li><code>section</code> --- 块级标签</li><li><code>aside</code> --- 侧边栏标签</li><li><code>footer</code> --- 尾部标签 多媒体音频标签</li></ul><ol><li>音频audio 支持格式ogg、MP3、wav 属性 autoplay=&quot;autoplay&quot;音频马上播放 controls=&quot;controls&quot;向用户显示控件，比如播放按钮 loop=&quot;loop&quot;重新开始播放 src=&quot;url&quot;播放音频的url 因为不同浏览器支持不同的格式，所以我们采取的方案是这个音频准备多个文件</li><li>视频video 支持格式ogg、mpeg 4、WebM 属性autoplay=&quot;autoplay&quot;视频自动播放 controls=&quot;controls&quot;向用户显示播放控件 width、height、设置宽度和高度 loop=&quot;loop&quot;循环播放 src=&quot;url&quot;视频url地址 poster=&quot;lmgurl&quot;加载等待画面图片 muted=&quot;muted&quot;静音播放 多媒体标签总结</li></ol><ul><li>音频标签与视频标签使用基本一致</li><li>多媒体标签在不同浏览器下情况不同，存在兼容性问题</li><li>谷歌浏览器把音频和视频标签的自动播放都禁止了</li><li>谷歌浏览器中视频添加 muted 标签可以自己播放</li><li>注意：重点记住使用方法以及自动播放即可，其他属性可以在使用时查找对应的手册</li></ul><p>新增input标签 属性tyle=&quot;email&quot;限制用户输入必须为Email类型 type=&quot;url&quot;限制用户输入必须为url类型 type=&quot;date&quot;限制用户输入必须为日期类型 &quot;time&quot;时间 &quot;month&quot;月&quot;week&quot;周 tyle=&quot;number&quot;限制用户输入必须为数字类型 tyle=&quot;tel&quot;手机号码 tyle=&quot;search&quot;搜索框 tyle=&quot;color&quot;生成一个颜色选择表单 新增表单属性required=&quot;required&quot;表单拥有该属性内容不能为空，必填 placeholder提示文本 表单的提示信息，存在默认值将不显示 autofocus=&quot;autofocus&quot;自动聚焦属性 autocomplete=&quot;off/on&quot;浏览器基于之前输入的值显示 默认打开on关闭off 需要放在表单内同时加name属性 multiple=&quot;multiple&quot;可以多选文件提交 二、CSS <strong>属性选择器</strong> E[att] 选择具有att属性的E元素 E[att=&quot;val&quot;]选择具有att属性且属性值等于val的E元素 E[att^=&quot;val&quot;]匹配具有att属性且以val开头的E元素 $=匹配具有att属性且以val结尾的E元素 *=匹配具有且值中含有val的E元素 <strong>结构伪类选择器</strong> 属性E:first-child匹配父元素的第一个子元素 last最后一个 E:nth-child(n)匹配父元素的第n个子元素 E:first-of-type 指定类型E的第一个 last最后一个 E:nth-of-type(n)指定类型的第n个 nth-child 详解</p><ul><li>注意：本质上就是选中第几个子元素</li><li>n 可以是数字、关键字、公式</li><li>n 如果是数字，就是选中第几个</li><li>常见的关键字有 <code>even</code> 偶数、<code>odd</code> 奇数</li><li>常见的公式如下(如果 n 是公式，则从 0 开始计算)</li><li>但是第 0 个元素或者超出了元素的个数会被忽略</li><li>2n偶数</li><li>2n+1奇数</li><li>5n 5 10 15</li><li>n+5 从第5个开始到最后</li><li>-n+5 前5个（包含第5个）</li></ul><p>区别</p><ul><li><p><code>nth-child</code> 选择父元素里面的第几个子元素，不管是第几个类型</p></li><li><p><code>nt-of-type</code> 选择指定类型的元素 伪类选择器 ：：before在元素前面插入内容 ：：after在元素内部后面插入内容 伪类选择器注意事项</p></li><li><p><code>before</code> 和 <code>after</code> 必须有 <code>content</code> 属性</p></li><li><p><code>before</code> 在内容前面，after 在内容后面</p></li><li><p><code>before</code> 和 <code>after</code> 创建的是一个元素，但是属于行内元素</p></li><li><p>创建出来的元素在 <code>Dom</code> 中查找不到，所以称为伪元素</p></li><li><p>伪元素和标签选择器一样，权重为 1</p></li><li><p>用于添加添加字体图标 <strong>2D转换 移动translate:</strong></p></li></ul><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">transform: translate(x, y)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">transform: translateX(n)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">transfrom: translateY(n)</span></span></code></pre></div><p>translate\` 最大的优点就是不影响其他元素的位置 行内标签没有效果 <strong>旋转totate:单位（deg）</strong></p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:hover</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rotate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">360</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">deg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>设置旋转中心点</strong>：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">transform-origin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: x y;</span></span></code></pre></div><p>注意：1. translate可以沿X，Y轴移动，中间需要用逗号隔开。 2. translate与rotate连写时用空格隔开。</p><p>缩放scale:</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">transform: scale(x, y)</span></span></code></pre></div><p>注意，x 与 y 之间使用逗号进行分隔</p><ul><li><p>同时使用多个转换，其格式为 <code>transform: translate() rotate() scale()</code></p></li><li><p>顺序会影响到转换的效果(先旋转会改变坐标轴方向) 动画（anination） 动画的基本使用</p></li><li><p>先定义动画</p></li><li><p>在调用定义好的动画\`</p></li></ul><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@keyframes</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> 动画名称</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    0%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    100%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* 调用动画 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    animation-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 动画名称;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 	/* 持续时间 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 	animation-duration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 持续时间；</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>常见属性： @keyframes 规定动画 animation 动画的简写属性 animation-name 规定动画名称 animation-duration 花费一个周期需要的时间 animation-timing-function 速度曲线 默认ease （linear匀速）（steps步长） animation-dely 规定动画何时开始 animation-iteration-count 动画播放次数 infinite无限 animation-direction 规定是否逆向播放 alternate逆播放 animation-play-state 是否暂停默认running 暂停paused animation-fill-mode 结束后状态 保持forwards 回到起始backwards</p><p><img src="https://img-blog.csdnimg.cn/20201017085616529.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hfZWxfbG8=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/2020101708563239.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hfZWxfbG8=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>简写</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* animation: 动画名称 持续时间 运动曲线 何时开始 播放次数 是否反方向 起始与结束状态 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">animation: name duration </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">timing-function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> delay </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">iteration-count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> direction </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">fill-mode</span></span></code></pre></div><p>3D转换 3D\` 的特点</p><ul><li><p>近大远小</p></li><li><p>物体和面遮挡不可见 三维坐标系</p></li><li><p>x 轴：水平向右 -- <strong>注意：x 轴右边是正值，左边是负值</strong></p></li><li><p>y 轴：垂直向下 -- <strong>注意：y 轴下面是正值，上面是负值</strong></p></li><li><p>z 轴：垂直屏幕 -- <strong>注意：往外边的是正值，往里面的是负值</strong> 3D\` 转换知识要点</p></li><li><p><code>3D</code> 位移：<code>translate3d(x, y, z)</code></p></li><li><p><code>3D</code> 旋转：<code>rotate3d(x, y, z)</code></p></li><li><p>透视：<code>perspctive</code> 后跟像素</p></li><li><p><code>3D</code>呈现 <code>transfrom-style</code></p></li><li><p>3D<code>移动就是在</code>2D\` 移动的基础上多加了一个可以移动的方向，就是 z 轴方向</p></li><li><p><code>transform: translateX(100px)</code>：仅仅是在 x 轴上移动</p></li><li><p><code>transform: translateY(100px)</code>：仅仅是在 y 轴上移动</p></li><li><p><code>transform: translateZ(100px)</code>：仅仅是在 z 轴上移动</p></li><li><p><code>transform: translate3d(x, y, z)</code>：其中x、y、z 分别指要移动的轴的方向的距离</p></li><li><p><strong>注意：x, y, z 对应的值不能省略，不需要填写用 0 进行填充</strong></p></li></ul><p><strong>透视perspective</strong></p><ul><li>透视需要写在被视察元素的父盒子上面</li></ul><ul><li><p>透视也称为视距，所谓的视距就是人的眼睛到屏幕的距离</p></li><li><p>距离视觉点越近的在电脑平面成像越大，越远成像越小</p></li><li><p>透视的单位是像素 <strong>- 如果想要网页产生 <code>3D</code> 效果需要透视</strong></p></li><li><p>z 轴越大(正值)，我们看到的物体就越大</p></li></ul><p>3D旋转 3D 旋转指可以让元素在三维平面内沿着 x 轴、y 轴、z 轴 或者自定义轴进行旋转 语法</p><ul><li><p><code>transform: rotateX(45deg)</code> -- 沿着 x 轴正方向旋转 45 度</p></li><li><p><code>transform: rotateY(45deg)</code> -- 沿着 y 轴正方向旋转 45 度</p></li><li><p><code>transform: rotateZ(45deg)</code> -- 沿着 z 轴正方向旋转 45 度</p></li><li><p><code>transform: rotate3d(x, y, z, 45deg)</code> -- 沿着自定义轴旋转 45 deg 为角度</p></li><li><p>左手准则</p></li><li><p>左手的手拇指指向 x 轴的正方向</p></li><li><p>其余手指的弯曲方向就是该元素沿着 x 轴旋转的方向</p></li><li><p>左手准则</p></li><li><p>左手的拇指指向 y 轴的正方向</p></li><li><p>其余的手指弯曲方向就是该元素沿着 y 轴旋转的方向(正值) rotate3d\`</p></li><li><p><code>transform: rotate3d(x, y, z, deg)</code> -- 沿着自定义轴旋转 deg 为角度</p></li><li><p>x, y, z 表示旋转轴的矢量，是标识你是否希望沿着该轴进行旋转，最后一个标识旋转的角度</p><ul><li><code>transform: rotate3d(1, 1, 0, 180deg)</code> -- 沿着对角线旋转 45deg</li><li><code>transform: rotate3d(1, 0, 0, 180deg)</code> -- 沿着 x 轴旋转 45deg</li></ul></li></ul><h6 id="_3d呈现transform-style" tabindex="-1">3D<code>呈现</code>transform-style\` <a class="header-anchor" href="#_3d呈现transform-style" aria-label="Permalink to &quot;3D\` 呈现 \`transform-style\`&quot;">​</a></h6><ol><li><code>transform-style</code><ul><li>☆☆☆☆☆</li><li>控制子元素是否开启三维立体环境</li><li><code>transform-style: flat</code> 代表子元素不开启 <code>3D</code> 立体空间，默认的</li><li><code>transform-style: preserve-3d</code> 子元素开启立体空间</li><li>代码写给父级，但是影响的是子盒子</li></ul></li></ol>`,34)]))}const u=s(e,[["render",n]]);export{k as __pageData,u as default};
