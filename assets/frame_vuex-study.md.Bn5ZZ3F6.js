import{_ as a,c as i,a0 as n,o as p}from"./chunks/framework.ClsDqtWH.js";const o=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"frame/vuex-study.md","filePath":"frame/vuex-study.md"}'),t={name:"frame/vuex-study.md"};function e(l,s,h,k,d,c){return p(),i("div",null,s[0]||(s[0]=[n(`<h4 id="注册" tabindex="-1">注册 <a class="header-anchor" href="#注册" aria-label="Permalink to &quot;注册&quot;">​</a></h4><p>在vue实例中引入并注册使用：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>new Vue({</span></span>
<span class="line"><span>  store,</span></span>
<span class="line"><span>  render: h =&gt; h(App)</span></span>
<span class="line"><span>}).$mount(&#39;#app&#39;)</span></span></code></pre></div><h4 id="state" tabindex="-1">state <a class="header-anchor" href="#state" aria-label="Permalink to &quot;state&quot;">​</a></h4><p>定义数据,提供唯一的数据源，所有的共享数据都要统一放到store中的state中存储</p><h4 id="mutations方法" tabindex="-1">mutations方法 <a class="header-anchor" href="#mutations方法" aria-label="Permalink to &quot;mutations方法&quot;">​</a></h4><p>定义在mutations中的函数才能修改state中的数据</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mutations: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    addN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">step</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> += </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">step</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sub(state) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">count--</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    subN(state, step) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">count</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">= </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">step</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span></code></pre></div><p>使用方法一：使用commit调用</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>methods:{</span></span>
<span class="line"><span>  Add(){</span></span>
<span class="line"><span>    //使用commit函数调用mutations中的对应函数，</span></span>
<span class="line"><span>    //第一个参数就是我们要调用的mutations中的函数名</span></span>
<span class="line"><span>    //第二个参数就是传递给add函数的参数</span></span>
<span class="line"><span>    this.$store.commit(&#39;add&#39;,10)</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>使用方法二：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">import { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mapMutations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } from &#39;vuex&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">methods:{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ...</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mapMutations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&#39;])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="actions方法" tabindex="-1">actions方法 <a class="header-anchor" href="#actions方法" aria-label="Permalink to &quot;actions方法&quot;">​</a></h4><p>可以在这里执行异步函数，不能直接修改state中的数据，需要通过context.commit(）触发mutations中的方法</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actions: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    addAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() =&gt; {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        // 在 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">actions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 中，不能直接修改 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 中的数据；</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        // 必须通过 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">commit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() 触发某个 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mutation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 才行</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">commit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&#39;)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }, 1000)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    addNAsync(context, step) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() =&gt; {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">commit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&#39;, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">step</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }, 1000)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span></code></pre></div><p>使用方法一：通过dispatch触发</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>methods:{</span></span>
<span class="line"><span>  AddAsync(){</span></span>
<span class="line"><span>    this.$store.dispatch(&#39;addAsync&#39;,5)</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>使用方法二：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import { mapActions } from &#39;vuex&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>methods:{</span></span>
<span class="line"><span>  ...mapActions([&#39;subAsync&#39;])</span></span>
<span class="line"><span>}</span></span></code></pre></div><h4 id="getter" tabindex="-1">getter <a class="header-anchor" href="#getter" aria-label="Permalink to &quot;getter&quot;">​</a></h4><p>Getter用于对Store中的数据进行加工处理形成新的数据,不会修改state中保存的数据，会随着state中数据的变化而变化</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> getters:{</span></span>
<span class="line"><span>    //添加了一个showNum的属性</span></span>
<span class="line"><span>    showNum : state =&gt;{</span></span>
<span class="line"><span>      return &#39;最新的count值为：&#39;+state.count;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span></code></pre></div><p>使用方法一：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>			{{$store.getters.showNum}}</span></span></code></pre></div><p>使用方法二：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import { mapGetters } from &#39;vuex&#39;</span></span>
<span class="line"><span>computed:{</span></span>
<span class="line"><span>  ...mapGetters([&#39;showNum&#39;])</span></span>
<span class="line"><span>}</span></span></code></pre></div>`,26)]))}const r=a(t,[["render",e]]);export{o as __pageData,r as default};
